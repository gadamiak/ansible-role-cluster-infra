---
heat_template_version: newton

description: >
  Heat stack containing a group of Nova instances.

parameters:
  cluster_prefix:
    type: string
    label: Instance name prefix
    default: "cluster"
  cluster_groups:
    type: json
    label: List of dicts defining parameters for all node groups
  cluster_keypair:
    type: string
    label: SSH key pair name
  cluster_az:
    type: string
    label: Availability zone
    default: nova
  cluster_net:
    type: json
    label: Network names and subnets to which the nodes should be attached
  group_idx:
    type: number
    label: Cluster group index
  volume_size_set_flag:
    type: boolean
    label: The volume size has been defined, for nodes that are booting from a volume.
    default: False
  volume_type_set_flag:
    type: boolean
    label: The volume type has been defined, for nodes that are booting from a volume.
    default: False
  security_groups_set_flag:
    type: boolean
    default: False

conditions:
  volume_size_set: { get_param: volume_size_set_flag }
  volume_type_set: { get_param: volume_type_set_flag }

resources:
  node_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: [cluster_groups, {get_param: group_idx}, num_nodes] }
      resource_def:
        type: Cluster::Instance
        properties:
          name: 
            list_join: 
            - '-'
            - [ { get_param: cluster_prefix },
                { get_param: [cluster_groups, {get_param: group_idx}, name] },
                '%index%' ]
          flavor: { get_param: [cluster_groups, {get_param: group_idx}, flavor] }
          image: { get_param: [cluster_groups, {get_param: group_idx}, image] }
          volume_size:
            if:
              - volume_size_set
              - { get_param: [cluster_groups, {get_param: group_idx}, volume_size] }
              - 0
          volume_type:
            if:
              - volume_type_set
              - { get_param: [cluster_groups, {get_param: group_idx}, volume_type] }
              - ""
          key_name: { get_param: cluster_keypair }
          availability_zone: { get_param: cluster_az }
          cluster_net: { get_param: cluster_net }
          security_groups_set_flag: { get_param: security_groups_set_flag }

outputs:
  group_data:
    description: Instance data for nodes in this group
    value:
      group: { get_param: [cluster_groups, {get_param: group_idx}, name] }
      nodes: { get_attr: [ node_group, instance_data ] }
